If you create a constructor method to build a DVD by title, then create a constructor method to build a DVD by category, does Java allow you to do this?

Yes, Java allows this, but we need to make some differences between those methods so Java can know which should be used. Here's the example code:

```java
public class DVD {
    private String title;
    private String category;

    // Constructor to build a DVD by title
    public DVD(String title) {
        this.title = title;
        this.category = "Unknown"; // Default category if not provided
    }

    // Constructor to build a DVD by category
    public DVD(String category, boolean isCategory) {
        this.category = category;
        this.title = "Untitled"; // Default title if not provided
    }

    // Method to display DVD information
    public void displayInfo() {
        System.out.println("Title: " + title);
        System.out.println("Category: " + category);
    }

    // Main method to test the constructors
    public static void main(String[] args) {
        DVD dvdByTitle = new DVD("Inception");
        DVD dvdByCategory = new DVD("Sci-Fi", true);

        System.out.println("DVD by Title:");
        dvdByTitle.displayInfo();

        System.out.println("\nDVD by Category:");
        dvdByCategory.displayInfo();
    }
}
```

Do you notice that boolean parameter `isCategory` of the constructor method with `category` field? It's to make that method different from the one with `title` field. As both `title` and `category` have `String` values, just using those fields themselves as parameters for the two constructor methods will make Java confused, unable to know which method should be used. You can change the name and type of that `isCategory` parameter to anything you want, as long as they allow the code to run properly.